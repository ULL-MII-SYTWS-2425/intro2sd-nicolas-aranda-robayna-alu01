<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/" rel="alternate" type="text/html" /><updated>2024-12-16T09:06:49-05:00</updated><id>http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/feed.xml</id><title type="html">Introducción al Desarrollo de Sistemas</title><subtitle>A flexible Jekyll theme for your blog or site with a minimalist aesthetic.</subtitle><author><name>Nicolás Aranda</name></author><entry><title type="html">Resumen capítulo 2</title><link href="http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/chachi" rel="alternate" type="text/html" title="Resumen capítulo 2" /><published>2023-12-04T00:00:00-05:00</published><updated>2023-12-04T00:00:00-05:00</updated><id>http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/informe</id><content type="html" xml:base="http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/chachi"><![CDATA[{{ page.color }}

# Chapter 2: Lifecycle Types and Their Rationales

**Author:** James Cadle  
**Resource:** Developing Information Systems: Practical Guidance for IT Professionals  

This chapter introduces different **System Development Lifecycles (SDLCs)** and their application. It explores linear and evolutionary approaches, Agile, and hybrid methods, helping to decide the best approach.

## Key Concepts

### What is an SDLC?
An SDLC is a framework guiding the stages of system development, including feasibility study, requirements, design, development, testing, and implementation. These stages ensure structured and efficient system delivery.

### Linear vs. Evolutionary Approaches
- **Linear:** Follows a sequential flow (e.g., Waterfall, V-Model). Best for stable requirements but less adaptable to change.
- **Evolutionary:** Iterative and adaptive (e.g., Spiral, Agile). Ideal for unclear requirements or innovation.

### Lifecycle Examples
1. **Waterfall:** Rigid and step-by-step. Strong for well-defined projects but struggles with changing requirements.
2. **V-Model:** Enhances testing and quality assurance. Suitable for safety-critical systems.
3. **Incremental:** Delivers functionality in parts, allowing earlier customer feedback.
4. **Spiral:** Focuses on risk reduction through iterations and prototypes.
5. **Agile:** Collaborative and iterative. Excellent for fast-changing environments but requires close customer involvement.

## Impact of Agile
Agile revolutionized SDLCs with its focus on collaboration, adaptability, and delivering working software quickly. While effective for small teams, challenges arise in regulated environments or large-scale projects.

## Choosing the Right Approach
Selecting an SDLC depends on factors like:
- **Complexity:** Simple problems suit Waterfall; complex ones may need Spiral or Agile.
- **Team Experience:** Familiarity with the approach often ensures success.
- **Requirements Stability:** Stable requirements favor linear methods; evolving ones need iterative approaches.
- **Customer Involvement:** High involvement from customers fits with Agile; low involvement aligns with linear models.

By tailoring the SDLC to the project's needs, organizations can balance flexibility, quality, and efficiency effectively.]]></content><author><name>Nicolás Aranda</name></author><category term="Post Formats" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Informe</title><link href="http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/chuchu" rel="alternate" type="text/html" title="Informe" /><published>2022-10-01T00:00:00-05:00</published><updated>2022-10-01T00:00:00-05:00</updated><id>http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/informe</id><content type="html" xml:base="http://localhost:4444/intro2sd-nicolas-aranda-robayna-alu01/chuchu"><![CDATA[<h1 id="introducción-al-desarrollo-de-sistemas">Introducción al Desarrollo de Sistemas</h1>

<p><strong>Autor:</strong> James Cadle<br />
<strong>Fuente:</strong> Developing Information Systems: Practical Guidance for IT Professionals</p>

<h2 id="contenidos-del-capítulo">Contenidos del Capítulo</h2>
<ol>
  <li><strong>Propósito y alcance</strong> del desarrollo de sistemas.</li>
  <li><strong>Etapas típicas</strong> en el proceso de desarrollo.</li>
  <li><strong>Relación con otras disciplinas</strong> como gestión de proyectos, análisis de negocios y arquitectura de sistemas.</li>
  <li><strong>Impacto del offshoring y outsourcing</strong> en el desarrollo de sistemas.</li>
  <li><strong>Visión general</strong> de los capítulos siguientes.</li>
</ol>

<h2 id="qué-es-el-desarrollo-de-sistemas">¿Qué es el Desarrollo de Sistemas?</h2>
<p>El desarrollo de sistemas es el proceso estructurado de convertir necesidades de negocio en un sistema operativo de TI. Las etapas comunes incluyen:</p>
<ul>
  <li><strong>Estudio de viabilidad:</strong> determinar si el proyecto es viable.</li>
  <li><strong>Ingeniería de requisitos:</strong> analizar y especificar necesidades del usuario.</li>
  <li><strong>Diseño del sistema:</strong> planificar cómo el sistema cumplirá los requisitos.</li>
  <li><strong>Desarrollo:</strong> programar el software necesario.</li>
  <li><strong>Pruebas e implementación:</strong> verificar y desplegar la solución.</li>
</ul>

<h2 id="disciplinas-relacionadas">Disciplinas Relacionadas</h2>
<ul>
  <li><strong>Gestión de proyectos:</strong> coordinación y planificación de recursos.</li>
  <li><strong>Análisis de negocios:</strong> investigación de problemas y oportunidades.</li>
  <li><strong>Arquitectura de sistemas:</strong> desarrollo de una arquitectura que permita la expansión del sistema.</li>
  <li><strong>Programación y pruebas:</strong> creación del código y verificación de su calidad.</li>
  <li><strong>Control de calidad y gestión del cambio:</strong> asegurar que los sistemas cumplan con los estándares de calidad.</li>
</ul>

<h2 id="offshoring-y-outsourcing">Offshoring y Outsourcing</h2>
<ul>
  <li><strong>Offshoring:</strong> desarrollo en otros países para reducir costos.</li>
  <li><strong>Outsourcing:</strong> externalización de desarrollo a empresas especializadas, lo cual puede implicar una pérdida de control sobre sistemas críticos.</li>
</ul>]]></content><author><name>Nicolás Aranda</name></author><category term="Post Formats" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html"><![CDATA[]]></summary></entry></feed>